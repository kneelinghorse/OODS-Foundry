import { extname, join } from 'node:path';

export interface BarrelEntry {
  readonly interfaceName: string;
  readonly fileName: string;
}

export interface BarrelRenderOptions {
  readonly outputDir: string;
}

export function renderBarrelFile(entries: readonly BarrelEntry[]): string {
  const header = [
    '/**',
    ' * Barrel exports for generated object interfaces.',
    ' *',
    ' * DO NOT EDIT - This file is auto-generated by the object type generator.',
    ' */',
    '',
  ];

  if (entries.length === 0) {
    return `${header.join('\n')}// No composed objects were generated.\n`;
  }

  const sorted = [...entries].sort((a, b) =>
    a.interfaceName.localeCompare(b.interfaceName)
  );

  const exportLines = sorted.map((entry) => {
    const moduleName = removeExtension(entry.fileName);
    return `export type { ${entry.interfaceName} } from './${moduleName}';`;
  });

  return `${header.join('\n')}${exportLines.join('\n')}\n`;
}

export function getOutputFilePath(options: BarrelRenderOptions): string {
  return join(options.outputDir, 'index.ts');
}

function removeExtension(fileName: string): string {
  if (fileName.endsWith('.d.ts')) {
    return fileName.slice(0, -5);
  }

  const ext = extname(fileName);
  return ext ? fileName.slice(0, -ext.length) : fileName;
}

name: CI

on:
  workflow_dispatch: {}
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - 'cmos/**'
  push:
    branches: [ main ]
    paths-ignore:
      - 'cmos/**'

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build tokens
        run: pnpm run build:tokens

      - name: Build packages
        run: pnpm run build:packages

      - name: Build workspace
        run: pnpm run build

  lint:
    name: lint
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint sources
        run: pnpm run lint

  typecheck:
    name: typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check workspace
        run: pnpm exec tsc --noEmit

  tenancy:
    name: tenancy-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tenancy matrix
        run: pnpm tenancy:check

  tokens-validate:
    name: tokens-validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate design tokens
        run: pnpm run tokens:validate

  diagnostics-schema:
    name: diagnostics-schema
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate diagnostics.json schema
        run: node scripts/validate-diagnostics-schema.mjs

  tokens-governance:
    name: tokens-governance
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        brand: [A, B]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build tokens
        run: pnpm run build:tokens

      - name: Collect PR labels
        id: labels
        run: |
          labels=$(jq -r '[.pull_request.labels[].name] | join(",")' "$GITHUB_EVENT_PATH")
          if [ "$labels" = "null" ]; then
            labels=""
          fi
          echo "value=$labels" >> "$GITHUB_OUTPUT"

      - name: Run tokens-governance diff (Brand ${{ matrix.brand }})
        id: governance
        env:
          BRAND: ${{ matrix.brand }}
        run: |
          mkdir -p artifacts/tokens
          brand_lower=$(printf '%s' "$BRAND" | tr '[:upper:]' '[:lower:]')
          report="artifacts/tokens/brand-${brand_lower}-report.json"
          comment="artifacts/tokens/brand-${brand_lower}-comment.md"
          set +e
          pnpm run tokens:governance -- diff \
            --brand "$BRAND" \
            --base "${{ github.event.pull_request.base.sha }}" \
            --head "${{ github.sha }}" \
            --json "$report" \
            --comment "$comment" \
            --labels "${{ steps.labels.outputs.value }}"
          status=$?
          echo "status=$status" >> "$GITHUB_OUTPUT"
          echo "report=$report" >> "$GITHUB_OUTPUT"
          echo "comment=$comment" >> "$GITHUB_OUTPUT"
          exit 0

      - name: Upload governance artifacts (Brand ${{ matrix.brand }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tokens-governance-${{ matrix.brand }}-${{ github.run_id }}
          path: |
            ${{ steps.governance.outputs.report }}
            ${{ steps.governance.outputs.comment }}
          if-no-files-found: warn

      - name: Publish governance comment (Brand ${{ matrix.brand }})
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const filePath = path.resolve(process.env.GITHUB_WORKSPACE, '${{ steps.governance.outputs.comment }}');
            if (!fs.existsSync(filePath)) {
              core.warning(`Governance comment file not found at ${filePath}`);
              return;
            }
            const body = fs.readFileSync(filePath, 'utf8').trim();
            if (!body) {
              core.warning('Governance comment body empty, skipping.');
              return;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });

      - name: Enforce governance result (Brand ${{ matrix.brand }})
        if: steps.governance.outputs.status != '0'
        run: |
          echo "tokens-governance exited with status ${{ steps.governance.outputs.status }} for brand ${{ matrix.brand }}"
          exit 1

  a11y-contract:
    name: a11y-contract
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build tokens
        run: pnpm run build:tokens

      - name: Build tw-variants package
        run: pnpm --filter @oods/tw-variants run build

      - name: Build Storybook
        run: pnpm run build-storybook

      - name: Install Playwright (Chromium)
        run: pnpm exec playwright install --with-deps chromium

      - name: Run accessibility contract
        run: pnpm run a11y:diff

      - name: Upload accessibility report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: a11y-guardrail-${{ github.run_id }}
          path: tools/a11y/reports/
          if-no-files-found: warn

  vr-test:
    name: vr-test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      pull-requests: write
    env:
      CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build tokens
        run: pnpm run build:tokens

      - name: Build tw-variants package
        run: pnpm --filter @oods/tw-variants run build

      - name: Build packages
        run: pnpm run build:packages

      - name: Cache Storybook build
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/storybook
          key: ${{ runner.os }}-sb-${{ hashFiles('pnpm-lock.yaml', '.storybook/**', 'src/**', 'apps/**') }}
          restore-keys: |
            ${{ runner.os }}-sb-

      - name: Build Storybook
        run: pnpm run build-storybook

      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ env.CHROMATIC_PROJECT_TOKEN }}
          workingDir: .
          storybookBuildDir: storybook-static
          autoAcceptChanges: main
          # Do not fail the job on visual diffs; reviewers will approve changes in Chromatic UI
          exitZeroOnChanges: true

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build tokens
        run: pnpm run build:tokens

      - name: Run coverage suite
        run: pnpm run test:coverage

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}
          path: coverage
          if-no-files-found: warn

name: Performance Harness Nightly

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scenario:
        description: 'Scenario to run (or "all" for full suite)'
        required: false
        default: 'all'

permissions:
  contents: read
  actions: read

jobs:
  perf-harness:
    name: Performance Harness
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need history for baseline calculation

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build Storybook
        run: pnpm run build-storybook

      - name: Start Storybook (background)
        run: |
          pnpm dlx serve storybook-static -l 6006 &
          echo $! > storybook.pid
          sleep 5

      - name: Run performance harness
        id: perf_run
        run: |
          if [ "${{ github.event.inputs.scenario }}" = "all" ] || [ -z "${{ github.event.inputs.scenario }}" ]; then
            pnpm perf:harness --output diagnostics/perf-results-${{ github.sha }}.json
          else
            pnpm perf:harness --scenario ${{ github.event.inputs.scenario }} --output diagnostics/perf-results-${{ github.sha }}.json
          fi

      - name: Stop Storybook
        if: always()
        run: |
          if [ -f storybook.pid ]; then
            kill $(cat storybook.pid) || true
            rm storybook.pid
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: perf-results-${{ github.sha }}
          path: diagnostics/perf-results-${{ github.sha }}.json
          retention-days: 90

      - name: Download historical baselines
        id: download_history
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          pattern: perf-results-*
          path: diagnostics/perf-history
          merge-multiple: true

      - name: Calculate baseline
        id: calc_baseline
        if: steps.download_history.outcome == 'success'
        run: |
          node scripts/perf/calc-baseline.mjs \
            --history 10 \
            --input diagnostics/perf-history \
            --output diagnostics/perf-baseline.json

      - name: Check for regressions
        id: check_regressions
        if: steps.calc_baseline.outcome == 'success'
        continue-on-error: true
        run: |
          node scripts/perf/check-regressions.mjs \
            --current diagnostics/perf-results-${{ github.sha }}.json \
            --baseline diagnostics/perf-baseline.json \
            --output diagnostics/perf-regressions.json

      - name: Upload regression report
        if: steps.check_regressions.outcome != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: perf-regression-report-${{ github.sha }}
          path: |
            diagnostics/perf-baseline.json
            diagnostics/perf-regressions.json
          retention-days: 30

      - name: Send Slack notification
        if: steps.check_regressions.outcome == 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_PERF_WEBHOOK_URL }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          node scripts/perf/notify-slack.mjs --report diagnostics/perf-regressions.json

      - name: Fail job on regressions
        if: steps.check_regressions.outcome == 'failure'
        run: |
          echo "::error::Performance regressions detected. See artifacts for details."
          exit 1

      - name: Update diagnostics.json
        if: always()
        run: |
          # Read current results
          PERF_DATA=$(cat diagnostics/perf-results-${{ github.sha }}.json)

          # Merge into diagnostics.json if it exists
          if [ -f diagnostics.json ]; then
            node -e "
              const fs = require('fs');
              const diag = JSON.parse(fs.readFileSync('diagnostics.json', 'utf-8'));
              const perf = JSON.parse(fs.readFileSync('diagnostics/perf-results-${{ github.sha }}.json', 'utf-8'));
              diag.performanceHarness = perf.performanceHarness;
              diag.performanceHarness.lastUpdated = new Date().toISOString();
              fs.writeFileSync('diagnostics.json', JSON.stringify(diag, null, 2));
            "
          else
            # Create new diagnostics.json
            echo "{}" | node -e "
              const fs = require('fs');
              const perf = JSON.parse(fs.readFileSync('diagnostics/perf-results-${{ github.sha }}.json', 'utf-8'));
              const diag = { performanceHarness: perf.performanceHarness };
              diag.performanceHarness.lastUpdated = new Date().toISOString();
              fs.writeFileSync('diagnostics.json', JSON.stringify(diag, null, 2));
            "
          fi

      - name: Commit diagnostics update
        if: always() && github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(perf): update diagnostics.json from nightly run"
          file_pattern: 'diagnostics.json'
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'

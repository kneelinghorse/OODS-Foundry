name: PR Validate

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'packages/**'
      - 'tokens/**'
      - 'apps/**'
      - 'src/**'
      - 'tools/**'
      - 'scripts/**'
      - '.github/**'
      - 'pnpm-lock.yaml'
      - 'package.json'
      - 'pnpm-workspace.yaml'

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build tokens
        run: pnpm run build:tokens

      - name: Build packages
        run: pnpm run build:packages

      - name: Build packages
        run: pnpm run build

  lint:
    name: lint
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint sources
        run: pnpm run lint

  typecheck:
    name: typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check workspace
        run: pnpm exec tsc --noEmit

  tokens-validate:
    name: tokens-validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate design tokens
        run: pnpm run validate:tokens

  a11y-contract:
    name: a11y-contract
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build tokens
        run: pnpm run build:tokens

      - name: Build tw-variants package
        run: pnpm --filter @oods/tw-variants run build

      - name: Install Playwright (Chromium)
        run: pnpm exec playwright install --with-deps chromium

      - name: Run accessibility contract
        run: pnpm run a11y:diff

      - name: Upload accessibility report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: a11y-guardrail-${{ github.run_id }}
          path: tools/a11y/reports/
          if-no-files-found: warn

  vr-test:
    name: vr-test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      pull-requests: write
    env:
      CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build tokens
        run: pnpm run build:tokens

      - name: Build tw-variants package
        run: pnpm --filter @oods/tw-variants run build

      - name: Build packages
        run: pnpm run build:packages

      - name: Cache Storybook build
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/storybook
          key: ${{ runner.os }}-sb-${{ hashFiles('pnpm-lock.yaml', '.storybook/**', 'src/**', 'apps/**') }}
          restore-keys: |
            ${{ runner.os }}-sb-

      - name: Build Storybook
        run: pnpm run build-storybook

      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ env.CHROMATIC_PROJECT_TOKEN }}
          workingDir: .
          storybookBuildDir: storybook-static
          autoAcceptChanges: main
          exitZeroOnChanges: true
          prComment: true

  coverage:
    name: coverage
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build tokens
        run: pnpm run build:tokens

      - name: Run coverage suite
        run: pnpm run test:coverage

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}
          path: coverage
          if-no-files-found: warn

#!/usr/bin/env node
import { access, chmod, readFile, writeFile } from 'node:fs/promises';
import path from 'node:path';
import { constants as fsConstants } from 'node:fs';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const appRoot = path.resolve(__dirname, '..', '..');
const repoRoot = path.resolve(appRoot, '..');
const gitDir = path.join(repoRoot, '.git');
const hookPath = path.join(gitDir, 'hooks', 'pre-commit');

const hookScript = `#!/bin/sh
# Generated by tools/token-lint/setup-precommit.mjs
set -e

if [ "$SKIP_TOKENS_LINT" = "1" ]; then
  echo "Skipping design token lint (SKIP_TOKENS_LINT=1)."
  exit 0
fi

echo "Running design token guardrails..."
npm --prefix app run lint:tokens
`;

async function hookExists() {
  try {
    await access(hookPath, fsConstants.F_OK);
    return true;
  } catch {
    return false;
  }
}

async function hookContainsMarker() {
  try {
    const content = await readFile(hookPath, 'utf8');
    return content.includes('design token guardrails');
  } catch {
    return false;
  }
}

async function writeHook() {
  await writeFile(hookPath, hookScript, { encoding: 'utf8', mode: 0o755 });
  await chmod(hookPath, 0o755);
  console.log(`Configured git pre-commit hook at ${hookPath}`);
}

async function main() {
  try {
    await access(gitDir, fsConstants.F_OK);
  } catch {
    console.warn('No .git directory detected; skipping pre-commit hook installation.');
    return;
  }

  if (await hookExists()) {
    if (await hookContainsMarker()) {
      return;
    }
    console.warn(
      'A pre-commit hook already exists and was not generated by the token lint installer. ' +
        'Please ensure it runs "npm --prefix app run lint:tokens".'
    );
    return;
  }

  await writeHook();
}

main().catch((error) => {
  console.error(error instanceof Error ? error.message : error);
  process.exitCode = 1;
});

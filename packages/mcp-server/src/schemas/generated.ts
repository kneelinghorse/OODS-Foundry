// @generated
// This file is auto-generated by @oods/schemas-tools.
// Do not edit manually; instead update the source JSON schemas and re-run the generator.

// Source: billing.reviewKit.input.json
/**
 * When true, writes review kit artifacts to the billing bundle directory.
 */
export type ApplyReviewKitChanges = boolean;
/**
 * Billing object to include in the review kit bundle.
 */
export type Object = 'Subscription' | 'Invoice' | 'Plan' | 'Usage';
/**
 * Provider fixtures to compare in the review kit.
 *
 * @minItems 1
 */
export type Fixtures = ['stripe' | 'chargebee', ...('stripe' | 'chargebee')[]];

export interface BillingReviewKitInput {
  apply?: ApplyReviewKitChanges;
  object: Object;
  fixtures?: Fixtures;
}

// Source: billing.switchFixtures.input.json
/**
 * When true, records the fixture switch results as artifacts.
 */
export type ApplyFixtureChanges = boolean;
/**
 * Billing fixture provider to activate for Storybook scenarios.
 */
export type Provider = 'stripe' | 'chargebee';

export interface BillingSwitchFixturesInput {
  apply?: ApplyFixtureChanges;
  provider: Provider;
}

// Source: brand.apply.input.json
export type DeltaValue =
  | string
  | number
  | boolean
  | null
  | DeltaValue[]
  | {
      [k: string]: DeltaValue;
    };

export interface BrandApplyInput {
  /**
   * Target brand identifier.
   */
  brand?: 'A';
  /**
   * Alias changes (object) or RFC 6902 patch array when strategy=patch.
   */
  delta:
    | {
        [k: string]: DeltaValue;
      }
    | PatchOperation[];
  /**
   * Alias strategy rewrites token values; patch applies RFC 6902 operations.
   */
  strategy?: 'alias' | 'patch';
  apply?: boolean;
}
export interface PatchOperation {
  op: 'add' | 'remove' | 'replace';
  path: string;
  value?: DeltaValue;
}

// Source: brand.apply.output.json
export type BrandApplyOutput = GenericOutput;

// Source: generic.input.json
export interface GenericInput {
  apply?: boolean;
}

// Source: generic.output.json
export type JsonValue =
  | string
  | number
  | boolean
  | null
  | JsonValue[]
  | {
      [k: string]: JsonValue;
    };

export interface GenericOutput {
  /**
   * Absolute paths of artifacts produced by the tool.
   */
  artifacts: string[];
  /**
   * Path to diagnostics JSON output when produced.
   */
  diagnosticsPath?: string;
  /**
   * Absolute path to the transcript JSON file.
   */
  transcriptPath: string;
  /**
   * Path to bundle index describing transcript and artifacts.
   */
  bundleIndexPath: string;
  preview?: ToolPreview;
  /**
   * Optional descriptive metadata for artifacts.
   */
  artifactsDetail?: ArtifactDetail[];
}
export interface ToolPreview {
  summary?: string | null;
  notes?: string[];
  diffs?: PlanDiff[];
  specimens?: string[];
}
export interface PlanDiff {
  path: string;
  status: 'added' | 'modified' | 'deleted';
  summary?: PlanDiffSummary;
  hunks: {
    header: string;
    changes: PlanDiffChange[];
  }[];
  structured?: {
    type: 'json';
    before?: JsonValue;
    after?: JsonValue;
  };
}
export interface PlanDiffSummary {
  additions?: number;
  deletions?: number;
}
export interface PlanDiffChange {
  type: 'context' | 'add' | 'remove';
  value: JsonValue;
}
export interface ArtifactDetail {
  path: string;
  name: string;
  purpose?: string | null;
  sha256?: string | null;
  sizeBytes?: number | null;
}

// Source: release.tag.input.json
export interface ReleaseTagInput {
  apply?: boolean;
  tag: string;
  message?: string | null;
}

// Source: release.tag.output.json
export interface ReleaseTagOutput {
  artifacts: string[];
  transcriptPath: string;
  bundleIndexPath: string;
  tag: string;
  created: boolean;
  warnings?: string[];
}

// Source: release.verify.input.json
export interface ReleaseVerifyInput {
  apply?: boolean;
  /**
   * @minItems 1
   */
  packages?: [
    '@oods/tokens' | '@oods/tw-variants' | '@oods/a11y-tools',
    ...('@oods/tokens' | '@oods/tw-variants' | '@oods/a11y-tools')[]
  ];
  fromTag?: string;
}

// Source: release.verify.output.json
export interface ReleaseVerifyOutput {
  artifacts: string[];
  diagnosticsPath?: string;
  transcriptPath: string;
  bundleIndexPath: string;
  results: {
    name: string;
    version: string;
    identical: boolean;
    sha256: string;
    sizeBytes: number;
    warnings?: string[];
    files?: string[];
  }[];
  changelogPath: string;
  summary: string;
  warnings?: string[];
}

// Source: tokens.build.input.json
export interface TokensBuildInput {
  brand?: 'A';
  theme?: 'light' | 'dark' | 'hc';
  apply?: boolean;
}
